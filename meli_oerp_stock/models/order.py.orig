# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2009 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from odoo import fields, osv, models, api
from odoo.tools.translate import _
import logging
_logger = logging.getLogger(__name__)

import pdb
import requests

class SaleOrder(models.Model):

    _inherit = "sale.order"

    def _meli_order_update( self ):
        _logger.info("_meli_order_update: "+str(self))
        for order in self:
            if ((order.meli_shipment and order.meli_shipment.logistic_type == "fulfillment")
                or order.meli_shipment_logistic_type=="fulfillment"):
                #seleccionar almacen para la orden
                order.warehouse_id = order._meli_get_warehouse_id()
                _logger.info("order.warehouse_id: "+str(order.warehouse_id))

    def _meli_get_warehouse_id( self ):

        company = self.company_id
        wh_id = None

        _logger.info("_meli_get_warehouse_id: "+str(self))

        if (company.mercadolibre_stock_warehouse):
            wh_id = company.mercadolibre_stock_warehouse

        _logger.info("self.meli_shipment_logistic_type: "+str(self.meli_shipment_logistic_type))
        if (self.meli_shipment_logistic_type == "fulfillment"):
            if (company.mercadolibre_stock_warehouse_full):
                _logger.info("company.mercadolibre_stock_warehouse_full: "+str(company.mercadolibre_stock_warehouse_full))
                wh_id = company.mercadolibre_stock_warehouse_full
        _logger.info("wh_id: "+str(wh_id))
        return wh_id

<<<<<<< HEAD
    #update order after any quotation/order confirmation
    def orders_update_order_json( self, data, context=None, config=None, meli=None ):


        super(SaleOrder, self).orders_update_order_json( data=data, context=context, config=config, meli=meli)

        company = self.env.user.company_id

        self._meli_order_update()

=======
>>>>>>> e207b6b21e0be13845f034721ae06ae3cb6f4f08
    #try to update order before confirmation (quotation)
    def confirm_ml(self):

        company = self.env.user.company_id

        self._meli_order_update()

        super(SaleOrder, self).confirm_ml()

        #seleccionar en la confirmacion del stock.picking la informacion del carrier
        #

class MercadolibreOrder(models.Model):

    _inherit = "mercadolibre.orders"

    #update order after any quotation/order confirmation
    def orders_update_order_json( self, data, context=None ):

        super(MercadolibreOrder, self).orders_update_order_json(data, context)

        company = self.env.user.company_id

        if self.sale_order:
            self.sale_order._meli_order_update()
