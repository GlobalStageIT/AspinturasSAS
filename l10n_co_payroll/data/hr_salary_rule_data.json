{
  "rule": [
      {"code":"SUELDO", "struct_id":"Estructura Base",  "sequence": 1 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Sueldo",   "condition_python":"result = payslip.liquidar_por in('nomina')",   "amount_python_compute":"result = (contract.wage * (payslip.dias_a_pagar/30))",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"COM", "struct_id":"Estructura Base",  "sequence": 2 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Comisiones",   "condition_python":"if inputs.COM and contract.tipo_salario in('tradicional','integral'):\n result = inputs.COM.amount != 0",   "amount_python_compute":"if inputs.COM:\n     result = inputs.COM.amount\nelse:\n     result = 0",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"HED_MAN",  "struct_id":"Estructura Base",  "sequence": 3 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HED_MAN.amount/float(inputs.HED_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Horas Extras Diurnas (HED_MAN)",   "condition_python":"if inputs.HED_MAN:\n     result = inputs.HED_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HED_MAN.amount",   "category_id":"HED",   "quantity":"inputs.HED_MAN.descripcion",   "origin_partner":"employee"},
      {"code":"HEN_MAN",  "struct_id":"Estructura Base",  "sequence": 3 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HEN_MAN.amount/float(inputs.HEN_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Horas Extras Nocturnas (HEN_MAN)",   "condition_python":"if inputs.HEN_MAN:\n     result = inputs.HEN_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HEN_MAN.amount",   "category_id":"HEN",   "quantity":"inputs.HEN_MAN.descripcion",   "origin_partner":"employee"},
      {"code":"HEDDF_MAN",  "struct_id":"Estructura Base",  "sequence": 3 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HEDDF_MAN.amount/float(inputs.HEDDF_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Horas Extras Diurnas Dominical Festivo (HEDDF_MAN)",   "condition_python":"if inputs.HEDDF_MAN:\n     result = inputs.HEDDF_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HEDDF_MAN.amount",   "category_id":"HEDDF",   "quantity":"inputs.HEDDF_MAN.descripcion",   "origin_partner":"employee"},
      {"code":"HENDF_MAN",  "struct_id":"Estructura Base",  "sequence": 3 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HENDF_MAN.amount/float(inputs.HENDF_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Horas Extras Nocturnas Dominical Festivo (HENDF_MAN)",   "condition_python":"if inputs.HENDF_MAN:\n     result = inputs.HENDF_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HENDF_MAN.amount",   "category_id":"HENDF",   "quantity":"inputs.HENDF_MAN.descripcion",   "origin_partner":"employee"},

      {"code":"HED_AUT",  "struct_id":"Estructura Base",  "sequence": 4 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HED_AUT.amount/float(inputs.HED_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Horas Extras Diurnas (HED_AUT)",   "condition_python":"if inputs.HED_AUT:\n     result = inputs.HED_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HED_AUT.amount",   "category_id":"HED",   "quantity":"inputs.HED_AUT.descripcion",   "origin_partner":"employee"},
      {"code":"HEN_AUT",  "struct_id":"Estructura Base",  "sequence": 4 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HEN_AUT.amount/float(inputs.HEN_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Horas Extras Nocturnas (HEN_AUT)",   "condition_python":"if inputs.HEN_AUT:\n     result = inputs.HEN_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HEN_AUT.amount",   "category_id":"HEN",   "quantity":"inputs.HEN_AUT.descripcion",   "origin_partner":"employee"},
      {"code":"HEDDF_AUT",  "struct_id":"Estructura Base",  "sequence": 4 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HEDDF_AUT.amount/float(inputs.HEDDF_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Horas Extras Diurnas Dominical Festivo (HEDDF_AUT)",   "condition_python":"if inputs.HEDDF_AUT:\n     result = inputs.HEDDF_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HEDDF_AUT.amount",   "category_id":"HEDDF",   "quantity":"inputs.HEDDF_AUT.descripcion",   "origin_partner":"employee"},
      {"code":"HENDF_AUT",  "struct_id":"Estructura Base",  "sequence": 4 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HENDF_AUT.amount/float(inputs.HENDF_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Horas Extras Nocturnas Dominical Festivo (HENDF_AUT)",   "condition_python":"if inputs.HENDF_AUT:\n     result = inputs.HENDF_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HENDF_AUT.amount",   "category_id":"HENDF",   "quantity":"inputs.HENDF_AUT.descripcion",   "origin_partner":"employee"},

      {"code":"TOTAL_HOR_EXT",  "struct_id":"Estructura Base",  "sequence": 5 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Total Horas Extras",   "condition_python":"result = categories.HOR_EXT",   "amount_python_compute":"result=categories.HOR_EXT","category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"HRN_MAN",  "struct_id":"Estructura Base",  "sequence": 6 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HRN_MAN.amount/float(inputs.HRN_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Hora Recargo Nocturno (HRN_MAN)",   "condition_python":"if inputs.HRN_MAN:\n     result = inputs.HRN_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HRN_MAN.amount",   "category_id":"HRN",   "quantity":"inputs.HRN_MAN.descripcion",   "origin_partner":"employee"},
      {"code":"HRDDF_MAN",  "struct_id":"Estructura Base",  "sequence": 6 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HRDDF_MAN.amount/float(inputs.HRDDF_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Hora Recargo Diurnas Dominical Festivo (HRDDF_MAN)",   "condition_python":"if inputs.HRDDF_MAN:\n     result = inputs.HRDDF_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HRDDF_MAN.amount",   "category_id":"HRDDF",   "quantity":"inputs.HRDDF_MAN.descripcion",   "origin_partner":"employee"},
      {"code":"HRNDF_MAN",  "struct_id":"Estructura Base",  "sequence": 6 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HRNDF_MAN.amount/float(inputs.HRNDF_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Hora Recargo Nocturno Dominical Festivo (HRNDF_MAN)",   "condition_python":"if inputs.HRNDF_MAN:\n     result = inputs.HRNDF_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HRNDF_MAN.amount",   "category_id":"HRNDF",   "quantity":"inputs.HRNDF_MAN.descripcion",   "origin_partner":"employee"},

      {"code":"HRN_AUT",  "struct_id":"Estructura Base",  "sequence": 7 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HRN_AUT.amount/float(inputs.HRN_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Hora Recargo Nocturno (HRN_AUT)",   "condition_python":"if inputs.HRN_AUT:\n     result = inputs.HRN_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HRN_AUT.amount",   "category_id":"HRN",   "quantity":"inputs.HRN_AUT.descripcion",   "origin_partner":"employee"},
      {"code":"HRDDF_AUT",  "struct_id":"Estructura Base",  "sequence": 7 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HRDDF_AUT.amount/float(inputs.HRDDF_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Hora Recargo Diurnas Dominical Festivo (HRDDF_AUT)",   "condition_python":"if inputs.HRDDF_AUT:\n     result = inputs.HRDDF_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HRDDF_AUT.amount",   "category_id":"HRDDF",   "quantity":"inputs.HRDDF_AUT.descripcion",   "origin_partner":"employee"},
      {"code":"HRNDF_AUT",  "struct_id":"Estructura Base",  "sequence": 7 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HRNDF_AUT.amount/float(inputs.HRNDF_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"Hora Recargo Nocturno Dominical Festivo (HRNDF_AUT)",   "condition_python":"if inputs.HRNDF_AUT:\n     result = inputs.HRNDF_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HRNDF_AUT.amount",   "category_id":"HRNDF",   "quantity":"inputs.HRNDF_AUT.descripcion",   "origin_partner":"employee"},

      {"code":"TOTAL_RECARGO",  "struct_id":"Estructura Base",  "sequence": 8 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Total Recargo",   "condition_python":"result = categories.RECARGO",   "amount_python_compute":"result = categories.RECARGO",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"INCAPACIDAD_COMUN", "struct_id":"Estructura Base",  "sequence": 9 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Incapacidad Común",   "condition_python":"result= payslip.liquidar_por in('nomina','definitiva') and inputs.INCAPACIDAD_COMUN and inputs.INCAPACIDAD_COMUN.amount\n ",   "amount_python_compute":"result =inputs.INCAPACIDAD_COMUN.amount ",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      
      {
        "code":"LICMP", "struct_id":"Estructura Base", "sequence": 9 , "appears_on_payslip":"True", "condition_range":"contract.wage", "amount_fix":"0.0", "amount_percentage":"0.0", "condition_range_min":"", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"", "name":"Licencia de Maternidad/Paternidad", "category_id":"ING_SAL", "quantity":"1.0", "origin_partner":"employee",
        "condition_python":"result= payslip.liquidar_por in('nomina','definitiva') and inputs.LICMP and inputs.LICMP.amount\n ",
        "amount_python_compute":"result =inputs.LICMP.amount "
      },

      {"code":"VAC",  "struct_id":"Estructura Base",  "sequence": 10 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"100.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Vacaciones",   "condition_python":"result = payslip.liquidar_por=='vacaciones' and contract.tipo_salario in('tradicional','integral')",   "amount_python_compute":"salario_base = (payslip.promedio_wage_360+(payslip.promedio_variable_sin_extras_ni_rdominicalf_360*30))\nresult = (salario_base/30) * payslip.dias_a_pagar",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"BONIFICACION_S", "struct_id":"Estructura Base",  "sequence": 11 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Bonificación Salarial",   "condition_python":"result= inputs.BONIFICACION_S and inputs.BONIFICACION_S.amount and contract.tipo_salario in ('tradicional','integral')",   "amount_python_compute":"result = inputs.BONIFICACION_S.amount",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"AUXILIO_S", "struct_id":"Estructura Base",  "sequence": 12 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Auxilio Salarial",   "condition_python":"result= inputs.AUXILIO_S and inputs.AUXILIO_S.amount and contract.tipo_salario in ('tradicional','integral')",   "amount_python_compute":"result = inputs.AUXILIO_S.amount",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BONO_EPCTV_S", "struct_id":"Estructura Base",  "sequence": 13 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Bono (EPCTV) Salarial",   "condition_python":"result= inputs.BONO_EPCTV_S and inputs.BONO_EPCTV_S.amount and contract.tipo_salario in ('tradicional','integral')",   "amount_python_compute":"result = inputs.BONO_EPCTV_S.amount",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BONOS_S", "struct_id":"Estructura Base",  "sequence": 13 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Bono Salarial",   "condition_python":"result= inputs.BONOS_S and inputs.BONOS_S.amount and contract.tipo_salario in ('tradicional','integral')",   "amount_python_compute":"result = inputs.BONOS_S.amount",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BONO_EPCTV_ALIMENTACION_S", "struct_id":"Estructura Base",  "sequence": 14 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Bono (EPCTV) Alimentación Salarial",   "condition_python":"result= inputs.BONO_EPCTV_ALIMENTACION_S and inputs.BONO_EPCTV_ALIMENTACION_S.amount and contract.tipo_salario in ('tradicional','integral')",   "amount_python_compute":"result = inputs.BONO_EPCTV_ALIMENTACION_S.amount",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"OTRO_DEVENGADO_S", "struct_id":"Estructura Base",  "sequence": 15 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Otro Devengado Salarial",   "condition_python":"result= inputs.OTRO_DEVENGADO_S and inputs.OTRO_DEVENGADO_S.amount and contract.tipo_salario in ('tradicional','integral')",   "amount_python_compute":"result =inputs.OTRO_DEVENGADO_S.amount ",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"ING_SAL", "struct_id":"Estructura Base",  "sequence": 16 ,   "appears_on_payslip":"False",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Ingreso salarial",   "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') ",   "amount_python_compute":"result = categories.ING_SAL",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"BONIFICACION_NS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Bonificación No Salarial",   "condition_python":"result= inputs.BONIFICACION_NS and inputs.BONIFICACION_NS.amount ",   "amount_python_compute":"result = inputs.BONIFICACION_NS.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"AUXILIO_NS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Auxilio No Salarial",   "condition_python":"result= inputs.AUXILIO_NS and inputs.AUXILIO_NS.amount ",   "amount_python_compute":"result = inputs.AUXILIO_NS.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"COMPENSACION_O", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Compensación Ordinario",   "condition_python":"result= inputs.COMPENSACION_O and inputs.COMPENSACION_O.amount ",   "amount_python_compute":"result = inputs.COMPENSACION_O.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"COMPENSACION_E", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Compensación Extraordinario",   "condition_python":"result= inputs.COMPENSACION_E and inputs.COMPENSACION_E.amount ",   "amount_python_compute":"result = inputs.COMPENSACION_E.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BONO_EPCTV_NS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Bono (EPCTV) No Salarial",   "condition_python":"result= inputs.BONO_EPCTV_NS and inputs.BONO_EPCTV_NS.amount  ",   "amount_python_compute":"result = inputs.BONO_EPCTV_NS.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BONOS_NS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Bono No Salarial",   "condition_python":"result= inputs.BONOS_NS and inputs.BONOS_NS.amount  ",   "amount_python_compute":"result = inputs.BONOS_NS.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BONO_EPCTV_ALIMENTACION_NS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Bono (EPCTV) Alimentación No Salarial",   "condition_python":"result= inputs.BONO_EPCTV_ALIMENTACION_NS and inputs.BONO_EPCTV_ALIMENTACION_NS.amount ",   "amount_python_compute":"result = inputs.BONO_EPCTV_ALIMENTACION_NS.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"ANTICIPO", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Anticipo (Entrada)",   "condition_python":"result= inputs.ANTICIPO and inputs.ANTICIPO.amount ",   "amount_python_compute":"result = inputs.ANTICIPO.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"APOYO_SOST", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Apoyo Sostenibilidad",   "condition_python":"result= inputs.APOYO_SOST and inputs.APOYO_SOST.amount ",   "amount_python_compute":"result = inputs.APOYO_SOST.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"TELETRABAJO", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Teletrabajo",   "condition_python":"result= inputs.TELETRABAJO and inputs.TELETRABAJO.amount ",   "amount_python_compute":"result = inputs.TELETRABAJO.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BONIF_RETIRO", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Bonificación Retiro",   "condition_python":"result= inputs.BONIF_RETIRO and inputs.BONIF_RETIRO.amount ",   "amount_python_compute":"result = inputs.BONIF_RETIRO.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"INDEMNIZACION", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Indemnización",   "condition_python":"result= inputs.INDEMNIZACION and inputs.INDEMNIZACION.amount ",   "amount_python_compute":"result = inputs.INDEMNIZACION.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"REINTEGRO", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Reintegro (Entrada)",   "condition_python":"result= inputs.REINTEGRO and inputs.REINTEGRO.amount ",   "amount_python_compute":"result = inputs.REINTEGRO.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"OTRO_DEVENGADO_NS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Otro Devengado No Salarial",   "condition_python":"result= inputs.OTRO_DEVENGADO_NS and inputs.OTRO_DEVENGADO_NS.amount ",   "amount_python_compute":"result =inputs.OTRO_DEVENGADO_NS.amount ",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"PAGOS_TERCEROS_DEV", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Pagos a Terceros (Entrada)",   "condition_python":"result= inputs.PAGOS_TERCEROS_DEV and inputs.PAGOS_TERCEROS_DEV.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.PAGOS_TERCEROS_DEV.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"IND_ACC_ENF", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Indemnización Accidente Enfermedad",   "condition_python":"result= inputs.IND_ACC_ENF and inputs.IND_ACC_ENF.amount ",   "amount_python_compute":"result = inputs.IND_ACC_ENF.amount ",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"IND_PRO_MAT", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Indemnización Protección Maternidad",   "condition_python":"result= inputs.IND_PRO_MAT and inputs.IND_PRO_MAT.amount ",   "amount_python_compute":"result = inputs.IND_PRO_MAT.amount ",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"GAS_ENT", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Gastos Entierro",   "condition_python":"result= inputs.GAS_ENT and inputs.GAS_ENT.amount ",   "amount_python_compute":"result= inputs.GAS_ENT.amount ",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"VACACIONES_COMPENSADAS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Vacaciones Compensadas (Pagas)",   "condition_python":"result= inputs.VACACIONES_COMPENSADAS and inputs.VACACIONES_COMPENSADAS.amount\n ",   "amount_python_compute":"result = inputs.VACACIONES_COMPENSADAS.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {
        "code":"BAS_SEG_SOC_AFP_EPS", "struct_id":"Estructura Base", "sequence": 19 , "appears_on_payslip":"", "condition_range":"contract.wage", "amount_fix":"0.00", "amount_percentage":"0.0000", "condition_range_min":"0", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"0", "name":"Base seguridad social(AFP-EPS)", "category_id":"BAS_CAL", "quantity":"1.0", "origin_partner":"employee",
        "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones') ",
        "amount_python_compute":"diff = 0\ning_ns_40 = 0\nif payslip.liquidar_por == \"vacaciones\":\n    if contract.salario_variable:\n        IBC = payslip.ibc_seguridad_social_mes_anterior * payslip.dias / 30 if payslip.ibc_seguridad_social_mes_anterior else contract.wage * payslip.dias / 30\n    else:\n        IBC = contract.wage * payslip.dias / 30\nelse:\n    # Calcula el 40% de los ingresos totales (ingresos salariales + ingresos no salariales)\n    try:\n        bonificacion_ns = BONIFICACION_NS\n    except:\n        bonificacion_ns = 0\n    try:\n        auxilio_ns = AUXILIO_NS\n    except:\n        auxilio_ns = 0\n    try:\n        bonif_retiro = BONIF_RETIRO\n    except:\n        bonif_retiro = 0\n    try:\n        indemnizacion = INDEMNIZACION\n    except:\n        indemnizacion = 0\n    try:\n        otros_devengados_ns = OTROS_DEVENGADOS_NS\n    except:\n        otros_devengados_ns = 0\n    ing_ns_40 = bonificacion_ns + auxilio_ns + bonif_retiro + indemnizacion + otros_devengados_ns\n    # Si los ingresos no salariales superan al 40% de todos los ingresos, se suma a la base la diferencia\n    limit_40 = (categories.ING_SAL + ing_ns_40) * 0.4\n    diff = (ing_ns_40 - limit_40) if ing_ns_40 > limit_40 else 0\n    IBC = categories.ING_SAL + (inputs.INCAPACIDAD_COMUN.amount if inputs.INCAPACIDAD_COMUN and inputs.INCAPACIDAD_COMUN.amount else 0)\n\nif contract.tipo_salario == 'integral':\n    result = min(25 * payslip.smlv * (payslip.dias_a_pagar + payslip.dias_incapacidad_comun + payslip.dias_licencia_mat_pat) / 30, (IBC * 0.7 + diff))\nelif contract.tipo_salario in ('practicante', 'aprendiz Sena'):\n    result = payslip.smlv * payslip.dias / 30\nelif contract.tipo_salario in ('tradicional'):\n    result = min(25 * payslip.smlv * (payslip.dias_a_pagar + payslip.dias_incapacidad_comun + payslip.dias_licencia_mat_pat) / 30, (IBC + diff))\n\n# Si se supera 25smlv en el mes, se verifica si la base completa el límite de los 25 smlv\nif payslip.date_to == payslip.last_day_month:\n    # Busca todas las lineas ING_SAL e INCAPACIDAD_COMUN dentro de ese rango de fechas y las suma (nominas = open)\n    ingresos_salariales = payslip.sum('ING_SAL', payslip.first_day_month, payslip.last_day_month) + categories.ING_SAL\n    bases_seg_soc_pagado = payslip.sum('BAS_SEG_SOC_AFP_EPS', payslip.first_day_month, payslip.last_day_month)\n    bases_seg_soc_mes = bases_seg_soc_pagado + result\n\n    payslip_month = payslip.env['hr.payslip'].search(\n        [('employee_id', '=', employee.id),\n         ('state', '=', 'done'),\n         ('liquidar_por', 'in', ['vacaciones', 'nomina']),\n         ('date_from', '>=', payslip.first_day_month),\n         ('date_to', '<=', payslip.last_day_month)])\n\n    # Se verifica si los ingresos no salariales de todo el mes superan al 40% de todos los ingresos del mes.\n    ing_ns_40_mes = 0\n    diff_mes = 0\n    for slip in payslip_month:\n        for line in slip.line_ids:\n            ing_ns_40_mes += line.total if line.code == 'BONIFICACION_NS' else 0\n            ing_ns_40_mes += line.total if line.code == 'AUXILIO_NS' else 0\n            ing_ns_40_mes += line.total if line.code == 'BONIF_RETIRO' else 0\n            ing_ns_40_mes += line.total if line.code == 'INDEMNIZACION' else 0\n            ing_ns_40_mes += line.total if line.code == 'OTROS_DEVENGADOS_NS' else 0\n\n    limit_40_mes = (ingresos_salariales + ing_ns_40 + ing_ns_40_mes) * 0.4\n    diff_mes = (ing_ns_40 + ing_ns_40_mes - limit_40_mes) if (ing_ns_40 + ing_ns_40_mes) > limit_40_mes else 0\n\n    # Adiciona incapacidad comun del mes, si las hay\n    try:\n        incapacidad_comun = INCAPACIDAD_COMUN\n    except:\n        incapacidad_comun = 0\n    incapacidad_comun_mes = payslip.sum('INCAPACIDAD_COMUN', payslip.first_day_month, payslip.last_day_month) + incapacidad_comun\n    IBC_mes = ingresos_salariales + incapacidad_comun_mes\n\n    # En periodos de vacaciones la base de seguridad social es el Iresult = bases_seg_soc_mesBC del mes anterior, no los ingresos. Se ajusta\n    base_vac = ing_vac = 0\n    for slip in payslip_month:\n        if slip.liquidar_por == 'vacaciones':\n            for line in slip.line_ids:\n                ing_vac += line.total if line.code == 'ING_SAL' else 0\n                base_vac += line.total if line.code == 'BAS_SEG_SOC_AFP_EPS' else 0\n\n    if contract.tipo_salario == 'integral':\n        IBC_mes *= 0.7 + diff_mes\n        # Ajuste si existió periodo de vacaciones, salario integral\n        IBC_mes = IBC_mes - (ing_vac * 0.7) + base_vac\n    else:\n        IBC_mes += diff_mes\n        # Ajuste si existió periodo de vacaciones, salario tradicional\n        IBC_mes = IBC_mes - ing_vac + base_vac\n\n    if IBC_mes > 25 * payslip.smlv:\n        result = 25 * payslip.smlv - bases_seg_soc_pagado\n    # Cuando los ingresos del mes son menores a 25smlv verifica que la base este completa\n    elif IBC_mes <= 25 * payslip.smlv:\n        diff = IBC_mes - bases_seg_soc_mes\n        if diff != 0:\n            result += diff"
      },
      {"code":"AFP_TRA", "struct_id":"Estructura Base",  "sequence": 20 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte AFP",                                 "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones') and contract.tipo_salario in('tradicional','integral') and not employee.pensionado", "amount_python_compute":"#Si el trabajador tiene ausencias no pagas, las asume el trabajador\nvalor_ausencias_no_pagas = (payslip.nod_unpaid_leaves)*contract.wage/30\nresult = (BAS_SEG_SOC_AFP_EPS  + valor_ausencias_no_pagas) *0.04",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"fp"},
      {"code":"AFP_COM", "struct_id":"Estructura Base",  "sequence": 21 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte AFP Compañía",                            "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones') and contract.tipo_salario in('tradicional','integral') and not employee.pensionado",   "amount_python_compute":"#La empresa siempre paga el porcentaje correspondiente \nvalor_ausencias_no_pagas = (payslip.nod_unpaid_leaves)*contract.wage/30\nresult = (valor_ausencias_no_pagas + BAS_SEG_SOC_AFP_EPS) * 0.12",   "category_id":"SEG_SOC_PAR",   "quantity":"1.0",   "origin_partner":"fp"},
      {"code":"EPS_TRA", "struct_id":"Estructura Base",  "sequence": 22 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte EPS",                                 "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones') and contract.tipo_salario in('tradicional','integral')","amount_python_compute":"result=BAS_SEG_SOC_AFP_EPS* 0.04 ",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"eps"},
      {
        "code":"EPS_COM", "struct_id":"Estructura Base", "sequence": 23 , "appears_on_payslip":"", "condition_range":"contract.wage", "amount_fix":"0.00", "amount_percentage":"0.0000", "condition_range_min":"0", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"0", "name":"Aporte EPS Compañía", "category_id":"SEG_SOC_PAR", "quantity":"1.0", "origin_partner":"eps",
        "condition_python":"result = False\nif payslip.liquidar_por in ('nomina', 'vacaciones'):\n    valor_ausencias_no_pagas = (payslip.nod_unpaid_leaves) * contract.wage / 30\n    base_comparar_10smmlv = BAS_SEG_SOC_AFP_EPS + valor_ausencias_no_pagas\n    supera_10smmlv = base_comparar_10smmlv / payslip.dias > payslip.smlv * 10 / 30\n    result = (contract.tipo_salario in ('practicante', 'aprendiz Sena', 'integral') or not employee.company_id.ley_1607 or supera_10smmlv) and contract.tipo_salario not in ('pasante')",
        "amount_python_compute":"if contract.tipo_salario == 'integral':\n    valor_ausencias_no_pagas = (payslip.nod_unpaid_leaves) * contract.wage * 0.7 / 30\nelif contract.tipo_salario in ('tradicional'):\n    valor_ausencias_no_pagas = (payslip.nod_unpaid_leaves) * contract.wage / 30\n\nif valor_ausencias_no_pagas + BAS_SEG_SOC_AFP_EPS > 25 * payslip.smlv * (payslip.dias_a_pagar + payslip.dias_incapacidad_comun + payslip.dias_licencia_mat_pat + payslip.nod_unpaid_leaves) / 30:\n    valor_ausencias_no_pagas = payslip.nod_unpaid_leaves * 25 * payslip.smlv / 30\n    base = (payslip.dias_a_pagar + payslip.dias_incapacidad_comun + payslip.dias_licencia_mat_pat) * 25 * payslip.smlv / 30\nelse:\n    base = BAS_SEG_SOC_AFP_EPS\n\nif contract.tipo_salario in ('practicante', 'aprendiz Sena', 'pasante'):\n    eps_comp = payslip.smlv * payslip.dias * 0.125 / 30\nelif contract.tipo_salario in ('tradicional', 'integral'):\n    eps_comp = (valor_ausencias_no_pagas + base) * 0.085\n\nresult = eps_comp"},

      {
        "code":"BAS_SEG_SOC_ARL", "struct_id":"Estructura Base", "sequence": 24 , "appears_on_payslip":"", "condition_range":"contract.wage", "amount_fix":"0.00", "amount_percentage":"0.0000", "condition_range_min":"0", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"0", "name":"Base seguridad social(ARL)", "category_id":"BAS_CAL", "quantity":"1.0", "origin_partner":"employee",
        "condition_python":"result = payslip.liquidar_por in('nomina') ",
        "amount_python_compute":"#Calcula el 40% de los ingresos totales (ingresos salariales + ingresos no salariales)\nlimit_40 =(categories.ING_SAL + categories.ING_NO_SAL) * 0.4\ndiferencia = (categories.ING_NO_SAL - limit_40) if categories.ING_NO_SAL > limit_40 else 0\n\nvalor_dias_trabajados = ING_SAL - (inputs.LICMP.amount if inputs.LICMP else 0) - payslip.nod_paid_leaves*contract.wage/30\nif contract.tipo_salario == 'integral':\n  result = min(25*payslip.smlv*payslip.dias_trabajados/30,valor_dias_trabajados*0.7 + diferencia)\nelif contract.tipo_salario in('tradicional','practicante','aprendiz Sena','pasante'):\n  result= max(payslip.smlv*payslip.dias_trabajados/30,min(25*payslip.smlv*payslip.dias_trabajados/30,valor_dias_trabajados + diferencia))\n\n\n#Si se supera 25smlv en el mes, se verfica si la base completa el límite\nif payslip.date_to == payslip.last_day_month:\n   leaves = payslip.env['hr.payslip'].get_nod_paid_leaves(payslip.employee_id, payslip.first_day_month, payslip.last_day_month) + payslip.nod_paid_leaves\n   ingresos_salarial = (payslip.sum('ING_SAL',payslip.first_day_month,payslip.last_day_month) + categories.ING_SAL) - payslip.sum('VAC',payslip.first_day_month,payslip.last_day_month) - payslip.sum('LICMP',payslip.first_day_month,payslip.last_day_month) - (inputs.LICMP.amount if inputs.LICMP else 0)\n   valor_dias_trabajados_mes = ingresos_salarial - leaves*contract.wage/30\n\n   bases_seg_soc = payslip.sum('BAS_SEG_SOC_ARL',payslip.first_day_month,payslip.last_day_month) + result\n\n   if contract.tipo_salario == 'integral':\n      valor_dias_trabajados_mes *= 0.7\n \n   #Verifica si con el último se supera los 25smlv y completa la base ARL si es necesario\n   if valor_dias_trabajados_mes > 25*payslip.smlv:\n      result += 25*payslip.smlv -   bases_seg_soc \n\n   #Cuando los ingresos del mes son menores a 25smlv verifica que la base ARL este completa\n   elif valor_dias_trabajados_mes <= 25*payslip.smlv:\n      diff = valor_dias_trabajados_mes -  bases_seg_soc\n      if bases_seg_soc < valor_dias_trabajados_mes:\n         result += diff"
      },
      {"code":"ARL", "struct_id":"Estructura Base",  "sequence": 25 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte ARL",   "condition_python":"result = payslip.liquidar_por in('nomina')",   "amount_python_compute":"factor = 0\nif employee.nivel_arl == '1':\n   factor = 0.522\nelif employee.nivel_arl == '2':\n   factor = 1.044\nelif employee.nivel_arl == '3':\n   factor = 2.436\nelif employee.nivel_arl == '4':\n   factor = 4.350\nelif employee.nivel_arl == '5':\n   factor = 6.960\nresult = round(BAS_SEG_SOC_ARL * factor/100)",   "category_id":"SEG_SOC_PAR",   "quantity":"1.0",   "origin_partner":"arl"},

      {
        "code":"BAS_PAR", "struct_id":"Estructura Base", "sequence": 31 , "appears_on_payslip":"", "condition_range":"contract.wage", "amount_fix":"0.00", "amount_percentage":"0.0000", "condition_range_min":"0", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"0", "name":"Base Parafiscales", "category_id":"BAS_CAL", "quantity":"1.0", "origin_partner":"employee",
        "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') and  contract.tipo_salario in('tradicional','integral')",
        "amount_python_compute":"salario_base= categories.ING_SAL+(inputs.VACACIONES_COMPENSADAS.amount if inputs.VACACIONES_COMPENSADAS else 0) - (inputs.LICMP.amount if inputs.LICMP else 0)\n\nif contract.tipo_salario == 'integral':\n  result = (salario_base )*0.7\nelif contract.tipo_salario in('tradicional','practicante'):\n  result= salario_base"
      },

      {"code":"SENA", "struct_id":"Estructura Base",  "sequence": 32 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte SENA",   "condition_python":"result = contract.tipo_salario in ('tradicional','integral') and (payslip.liquidar_por in('nomina','vacaciones')  and ((payslip.dias_a_pagar+payslip.dias_incapacidad_comun) and  not (employee.company_id.ley_1607 and  (categories.ING_SAL+(inputs.INCAPACIDAD_COMUN.amount if inputs.INCAPACIDAD_COMUN else 0))/(payslip.dias_a_pagar+payslip.dias_incapacidad_comun) <= payslip.smlv * 10/30)  or payslip.liquidar_por in('definitiva')))",   "amount_python_compute":"result = BAS_PAR * 0.02 ",   "category_id":"SEG_SOC_PAR",   "quantity":"1.0",   "origin_partner":"sena"},
      {"code":"ICBF", "struct_id":"Estructura Base",  "sequence": 33 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte ICBF",   "condition_python":"result = contract.tipo_salario in ('tradicional','integral') and (payslip.liquidar_por in('nomina','vacaciones')  and ((payslip.dias_a_pagar+payslip.dias_incapacidad_comun) and  not (employee.company_id.ley_1607 and  (categories.ING_SAL+(inputs.INCAPACIDAD_COMUN.amount if inputs.INCAPACIDAD_COMUN else 0))/(payslip.dias_a_pagar+payslip.dias_incapacidad_comun) <= payslip.smlv * 10/30)  or payslip.liquidar_por in('definitiva')))",   "amount_python_compute":"result = BAS_PAR * 0.03 ",   "category_id":"SEG_SOC_PAR",   "quantity":"1.0",   "origin_partner":"icbf"},
      {"code":"CCF",  "struct_id":"Estructura Base", "sequence": 34 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte CCF",   	"condition_python":"result = contract.tipo_salario in('tradicional','integral') and (payslip.liquidar_por in('nomina','vacaciones') and (payslip.dias_a_pagar+payslip.dias_incapacidad_comun) or payslip.liquidar_por in('definitiva'))",   "amount_python_compute":"result = BAS_PAR * 0.04 ",   "category_id":"SEG_SOC_PAR",   "quantity":"1.0",   "origin_partner":"ccf"},

      {
        "code":"AUX_TRA", "struct_id":"Estructura Base", "sequence": 41, "appears_on_payslip":"True", "condition_range":"contract.wage", "amount_fix":"0.00", "amount_percentage":"0.0000", "condition_range_min":"0", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"0", "name":"Auxilio de transporte/conectividad", "category_id":"ING_NO_SAL", "quantity":"1.0", "origin_partner":"employee",
        "condition_python":"dias_trabajados = int(payslip.dias_trabajados)+(1 if  payslip.dias_trabajados-int(payslip.dias_trabajados) else 0)\ndias_trabajados += int(payslip.dias_trabajados_mes_hecho)+(1 if  payslip.dias_trabajados_mes_hecho-int(payslip.dias_trabajados_mes_hecho) else 0)\ntry:\n    horas_extras = TOTAL_HOR_EXT\nexcept:    horas_extras = 0\ntry:\n    comisiones = COM\nexcept:    \n    comisiones = 0\ntry:\n    total_recargo = TOTAL_RECARGO\nexcept:    total_recargo = 0\ntry:\n    recargos_DDF = categories.HRDDF\nexcept:    recargos_DDF=0\ntry:\n    recargos_NDF = categories.HRNDF\nexcept:    recargos_NDF = 0\ntry:\n    vacaciones_compensadas = VACACIONES_COMPENSADAS\nexcept:    vacaciones_compensadas = 0\ntry:\n    licencia_maternidad = LICMP\nexcept:    licencia_maternidad = 0\nresult = False\nif not employee.exento_transporte and payslip.liquidar_por in ('nomina','vacaciones') and contract.tipo_salario == 'tradicional':\n\n    ganado_condicion = ( ING_SAL- horas_extras - comisiones - vacaciones_compensadas - licencia_maternidad\n                                        +payslip.sum('ING_SAL',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum('TOTAL_HOR_EXT',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum('VAC',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum('COM',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum('VACACIONES_COMPENSADAS',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum('LICMP',payslip.first_day_month,payslip.last_day_month))\n    \n    if employee.transportation_payment == 'sin_dominical_festivo':\n            ganado_condicion += ( - recargos_NDF - recargos_DDF \n                                        -payslip.sum_category('HRDDF',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum_category('HRNDF',payslip.first_day_month,payslip.last_day_month))\n\n    elif employee.transportation_payment == 'sin_recargos':\n        ganado_condicion  += (- total_recargo\n                                +payslip.sum('TOTAL_RECARGO',payslip.first_day_month,payslip.last_day_month))\n\n    if employee.vacations_payment:\n        vacaciones = payslip.env['hr.payslip'].payroll_vacation_days(payslip.employee_id,payslip.first_day_month,payslip.last_day_month)\n        ganado_condicion  += vacaciones\n\n    valor_comisiones = (comisiones + payslip.sum('COM',payslip.first_day_month,payslip.last_day_month))/(30 if payslip.dias_a_pagar_hecho != 0 else 15)\n    valor_ganado = (ganado_condicion/(payslip.dias_a_pagar_hecho + payslip.dias_a_pagar)) if (payslip.dias_a_pagar_hecho + payslip.dias_a_pagar)>0 else 0\n    at_pagado = payslip.sum('AUX_TRA',payslip.first_day_month,payslip.last_day_month)\n    if  not (dias_trabajados and (valor_comisiones + valor_ganado) > payslip.smlv * 2/30) or employee.transportation_payment == 'auxilio_sin_sueldo':\n        result = True\n    if (payslip.dias_trabajados and (valor_comisiones + valor_ganado) > payslip.smlv * 2/30) and at_pagado!=0:  \n        result = True",
        "amount_python_compute":"dias_trabajados = int(payslip.dias_trabajados)+(1 if  payslip.dias_trabajados-int(payslip.dias_trabajados) else 0)\ndias_trabajados += int(payslip.dias_trabajados_mes_hecho)+(1 if  payslip.dias_trabajados_mes_hecho-int(payslip.dias_trabajados_mes_hecho) else 0)\ntry:\n    horas_extras = TOTAL_HOR_EXT\nexcept:    horas_extras = 0\ntry:\n    comisiones = COM\nexcept:    \n    comisiones = 0\ntry:\n    total_recargo = TOTAL_RECARGO\nexcept:    total_recargo = 0\ntry:\n    recargos_DDF = categories.HRDDF\nexcept:    recargos_DDF = 0\ntry:\n    recargos_NDF = categories.HRNDF\nexcept:    recargos_NDF = 0\ntry:\n    vacaciones_compensadas = VACACIONES_COMPENSADAS\nexcept:    vacaciones_compensadas = 0\ntry:\n    licencia_maternidad = LICMP\nexcept:    licencia_maternidad = 0\nresult = 0\nif not employee.exento_transporte and payslip.liquidar_por in ('nomina','vacaciones') and contract.tipo_salario == 'tradicional' :\n    if payslip.liquidar_por in ('vacaciones'):\n        result = 0\n    else:\n      \n        ganado_condicion = ( ING_SAL- horas_extras - comisiones - vacaciones_compensadas - licencia_maternidad\n                                        +payslip.sum('ING_SAL',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum('TOTAL_HOR_EXT',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum('VAC',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum('COM',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum('VACACIONES_COMPENSADAS',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum('LICMP',payslip.first_day_month,payslip.last_day_month))\n            \n        if employee.transportation_payment == 'sin_dominical_festivo':\n            ganado_condicion += ( - recargos_NDF - recargos_DDF \n                                        -payslip.sum_category('HRDDF',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum_category('HRNDF',payslip.first_day_month,payslip.last_day_month))\n\n        elif employee.transportation_payment == 'sin_recargos':\n            ganado_condicion  += (- total_recargo\n                                    +payslip.sum('TOTAL_RECARGO',payslip.first_day_month,payslip.last_day_month))\n\n        if employee.vacations_payment:\n            vacaciones = payslip.env['hr.payslip'].payroll_vacation_days(payslip.employee_id,payslip.first_day_month,payslip.last_day_month)\n            ganado_condicion  += vacaciones\n\n        valor_comisiones = (comisiones + payslip.sum('COM',payslip.first_day_month,payslip.last_day_month))/(30 if payslip.dias_a_pagar_hecho != 0 else 15)\n        valor_ganado = (ganado_condicion/(payslip.dias_a_pagar_hecho + payslip.dias_a_pagar)) if (payslip.dias_a_pagar_hecho + payslip.dias_a_pagar)>0 else 0\n        if ((dias_trabajados == 0 and payslip.dias_vacaciones == 0) or (valor_comisiones + valor_ganado) > payslip.smlv * 2/30) and employee.transportation_payment != 'auxilio_sin_sueldo': \n            at_a_pagar=0\n        else:\n            at_a_pagar = payslip.aux_trans * dias_trabajados / 30\n        at_pagado = payslip.sum('AUX_TRA',payslip.first_day_month,payslip.last_day_month)\n        result = at_a_pagar - at_pagado"
      },

      {"code":"AFC", "struct_id":"Estructura Base",  "sequence": 42 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte AFC",   "condition_python":"# Aporte se paga en la segunda quincena, o unico pago en caso de ser pagos mensuales\nif employee.type_payment_afc in ('monthly', 'second_half') and payslip.date_to==payslip.last_day_month:\n    result = employee.afc\n\n# Aporte se paga en la primera quincena\nelif employee.type_payment_afc == 'first_half' and payslip.date_to==payslip.first_day_month.replace(day=15):\n    result = employee.afc\n\n# Aporte se divide en dos quioncenas\nelif employee.type_payment_afc == 'both_fortnight':\n    if payslip.date_to==payslip.first_day_month.replace(day=15):\n        result = employee.afc/2\n    elif payslip.date_to==payslip.last_day_month:\n        remaining = payslip.sum('AFC',payslip.first_day_month, payslip.last_day_month)\n        if remaining > 0:\n            result = employee.afc - remaining\n        else:\n            result = employee.afc\nelse:\n    result = 0\n\nresult = payslip.liquidar_por in('nomina') and  employee.afc > 0 and result != 0",   "amount_python_compute":"# Aporte se paga en la segunda quincena, o unico pago en caso de ser pagos mensuales\nif employee.type_payment_afc in ('monthly', 'second_half') and payslip.date_to==payslip.last_day_month:\n    result = employee.afc\n\n# Aporte se paga en la primera quincena\nelif employee.type_payment_afc == 'first_half' and payslip.date_to==payslip.first_day_month.replace(day=15):\n    result = employee.afc\n\n# Aporte se divide en dos quioncenas\nelif employee.type_payment_afc == 'both_fortnight':\n    if payslip.date_to==payslip.first_day_month.replace(day=15):\n        result = employee.afc/2\n    elif payslip.date_to==payslip.last_day_month:\n        remaining = payslip.sum('AFC',payslip.first_day_month, payslip.last_day_month)\n        if remaining > 0:\n            result = employee.afc - remaining\n        else:\n            result = employee.afc\nelse:\n    result = 0",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"AVC", "struct_id":"Estructura Base",  "sequence": 42 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte AVC",   "condition_python":"# Aporte se paga en la segunda quincena, o unico pago en caso de ser pagos mensuales\nif employee.type_payment_avc in ('monthly', 'second_half') and payslip.date_to==payslip.last_day_month:\n    result = employee.avc\n\n# Aporte se paga en la primera quincena\nelif employee.type_payment_avc == 'first_half' and payslip.date_to==payslip.first_day_month.replace(day=15):\n    result = employee.avc\n\n# Aporte se divide en dos quioncenas\nelif employee.type_payment_avc == 'both_fortnight':\n    if payslip.date_to==payslip.first_day_month.replace(day=15):\n        result = employee.avc/2\n    elif payslip.date_to==payslip.last_day_month:\n        remaining = payslip.sum('AVC',payslip.first_day_month, payslip.last_day_month)\n        if remaining > 0:\n            result = employee.avc - remaining\n        else:\n            result = employee.avc\nelse:\n    result = 0\n\nresult = payslip.liquidar_por in('nomina') and  employee.avc > 0 and result != 0",   "amount_python_compute":"# Aporte se paga en la segunda quincena, o unico pago en caso de ser pagos mensuales\nif employee.type_payment_avc in ('monthly', 'second_half') and payslip.date_to==payslip.last_day_month:\n    result = employee.avc\n\n# Aporte se paga en la primera quincena\nelif employee.type_payment_avc == 'first_half' and payslip.date_to==payslip.first_day_month.replace(day=15):\n    result = employee.avc\n\n# Aporte se divide en dos quioncenas\nelif employee.type_payment_avc == 'both_fortnight':\n    if payslip.date_to==payslip.first_day_month.replace(day=15):\n        result = employee.avc/2\n    elif payslip.date_to==payslip.last_day_month:\n        remaining = payslip.sum('AVC',payslip.first_day_month, payslip.last_day_month)\n        if remaining > 0:\n            result = employee.avc - remaining\n        else:\n            result = employee.avc\nelse:\n    result = 0",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"FPV", "struct_id":"Estructura Base",  "sequence": 43 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte FPV",   "condition_python":"# Aporte se paga en la segunda quincena, o unico pago en caso de ser pagos mensuales\nif employee.type_payment_fpv in ('monthly', 'second_half') and payslip.date_to==payslip.last_day_month:\n    result = employee.fpv\n\n# Aporte se paga en la primera quincena\nelif employee.type_payment_fpv == 'first_half' and payslip.date_to==payslip.first_day_month.replace(day=15):\n    result = employee.fpv\n\n# Aporte se divide en dos quioncenas\nelif employee.type_payment_fpv == 'both_fortnight':\n    if payslip.date_to==payslip.first_day_month.replace(day=15):\n        result = employee.fpv/2\n    elif payslip.date_to==payslip.last_day_month:\n        remaining = payslip.sum('FPV',payslip.first_day_month, payslip.last_day_month)\n        if remaining > 0:\n            result = employee.fpv - remaining\n        else:\n            result = employee.fpv\nelse:\n    result = 0\n\nresult = payslip.liquidar_por in('nomina') and  employee.fpv > 0 and result != 0",   "amount_python_compute":"# Aporte se paga en la segunda quincena, o unico pago en caso de ser pagos mensuales\nif employee.type_payment_fpv in ('monthly', 'second_half') and payslip.date_to==payslip.last_day_month:\n    result = employee.fpv\n\n# Aporte se paga en la primera quincena\nelif employee.type_payment_fpv == 'first_half' and payslip.date_to==payslip.first_day_month.replace(day=15):\n    result = employee.fpv\n\n# Aporte se divide en dos quioncenas\nelif employee.type_payment_fpv == 'both_fortnight':\n    if payslip.date_to==payslip.first_day_month.replace(day=15):\n        result = employee.fpv/2\n    elif payslip.date_to==payslip.last_day_month:\n        remaining = payslip.sum('FPV',payslip.first_day_month, payslip.last_day_month)\n        if remaining > 0:\n            result = employee.fpv - remaining\n        else:\n            result = employee.fpv\nelse:\n    result = 0",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},

      {
        "code":"BAS_FS", "struct_id":"Estructura Base", "sequence": 44 , "appears_on_payslip":"", "condition_range":"contract.wage", "amount_fix":"0.00", "amount_percentage":"0.0000", "condition_range_min":"0", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"0", "name":"Base Fondo de solidaridad", "category_id":"BAS_CAL", "quantity":"1.0", "origin_partner":"employee",
        "condition_python":"result = payslip.liquidar_por in ('nomina', 'definitiva', 'vacaciones') and contract.tipo_salario in ('tradicional', 'integral')",
        "amount_python_compute":"salario_base = categories.ING_SAL + (inputs.INCAPACIDAD_COMUN.amount if inputs.INCAPACIDAD_COMUN and inputs.INCAPACIDAD_COMUN.amount else 0)\nif contract.tipo_salario == 'integral':\n    result = (salario_base) * 0.7\nelif contract.tipo_salario in ('practicante', 'aprendiz Sena'):\n    result = payslip.smlv * payslip.dias / 30\nelif contract.tipo_salario in ('tradicional'):\n    result = salario_base\n\n# En vacaciones la base para el Fondo de solidaridad es igual al valor de la Base de seguridad social\nif payslip.liquidar_por == 'vacaciones':\n    result = BAS_SEG_SOC_AFP_EPS\n\n# La base de la seguridad social no debe pasar el limite de 25 SMLV\nbase_fs_hecho = payslip.sum('BAS_FS', payslip.first_day_month, payslip.last_day_month)\nlimite_25_slmv = 25 * payslip.smlv * (payslip.dias_a_pagar + payslip.dias_a_pagar_hecho + payslip.dias_incapacidad_comun + payslip.dias_incapacidad_comun_hecho + payslip.dias_licencia_mat_pat + payslip.dias_licencia_mat_pat_hecho) / 30\nif base_fs_hecho + result > limite_25_slmv:\n    result = limite_25_slmv - base_fs_hecho"
      },
      {
        "code":"FON_SOL_SOL", "struct_id":"Estructura Base", "sequence": 45 , "appears_on_payslip":"True", "condition_range":"contract.wage", "amount_fix":"0.00", "amount_percentage":"1.0000", "condition_range_min":"0", "condition_select":"python", "amount_percentage_base":"0", "amount_select":"code", "active":"True", "condition_range_max":"0", "name":"Aporte Fondo de solidaridad-Solidaridad", "category_id":"DED", "quantity":"50 if (payslip.sum('BAS_FS',payslip.first_day_month,payslip.last_day_month)+BAS_FS) >= payslip.smlv * 4 else 0", "origin_partner":"fp",
        "condition_python":"result = 0\nif payslip.liquidar_por in('nomina','definitiva','vacaciones') and contract.tipo_salario in('tradicional','integral'):\n\ttot_base = payslip.base_fondo_solidaridad_hecho + BAS_FS\n\tfondo_pago = payslip.solidarity_fund_paid\n\tresult = not employee.pensionado and ((BAS_FS >= (payslip.smlv/30 * (payslip.dias_trabajados + payslip.dias_incapacidad_comun + payslip.dias_licencia_mat_pat + payslip.nod_paid_leaves) * 4)) or (abs(BAS_FS - (payslip.smlv/30 * (payslip.dias_trabajados + payslip.dias_incapacidad_comun + payslip.dias_licencia_mat_pat +payslip.nod_paid_leaves) * 4))<0.01) or (tot_base>= payslip.smlv * 4) or fondo_pago!=0)",
        "amount_python_compute":"base_fs_mes = BAS_FS\nporcentaje = 0\nporcentaje_pensionado=0\n\ndias_liq = 0\nif payslip.liquidar_por in ('vacaciones'):\n\tdias_liq = payslip.dias_vacaciones\nelse:\n\tdias_liq = payslip.dias_trabajados + payslip.dias_incapacidad_comun + payslip.nod_paid_leaves + payslip.dias_licencia_mat_pat\n\nif base_fs_mes >= payslip.smlv/30 * dias_liq * 4 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 4))<0.01):\n\tporcentaje=0.005\nporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\ncurrent_payrroll_fund = base_fs_mes * porcentaje\nif payslip.liquidar_por in ('nomina','definitiva'):\n\tif payslip.date_to == payslip.last_day_month:\n\t\ttot_base = payslip.base_fondo_solidaridad_hecho + BAS_FS\n\t\tfondo_pago = payslip.solidarity_fund_paid\n\t\tif tot_base >= payslip.smlv * 4 or (abs(tot_base-(payslip.smlv * 4))<0.01):\n\t\t\tporcentaje = 0.005\n\t\t\tif tot_base * porcentaje == (fondo_pago + current_payrroll_fund):\n\t\t\t\tresult = current_payrroll_fund\n\t\t\telse:\n\t\t\t\tresult = (tot_base * porcentaje) - fondo_pago\n\t\telse:\n\t\t\tif fondo_pago>0:\n\t\t\t\tresult = -fondo_pago\n\t\t\telse:\n\t\t\t\tresult = 0\n\n\telse:\n\t\tresult = current_payrroll_fund\n\nelif payslip.liquidar_por in ('vacaciones'):\n\tif payslip.date_from.month == payslip.date_to.month:\n\t\tresult = current_payrroll_fund\n\telse:\n\t\tdias_otro_mes = payslip.dias_a_pagar - payslip.days_month_date_from - 1\n\t\tbase_otro_mes = (base_fs_mes / payslip.dias_a_pagar) * dias_otro_mes\n\t\tbase_mes_actual = base_fs_mes - base_otro_mes\n\n\t\tif base_mes_actual >= payslip.smlv / 30 * (payslip.days_month_date_from +1) * 4 or (abs(base_mes_actual-(payslip.smlv / 30 * (payslip.days_month_date_from + 1) * 4)) < 0.01):\n\t\t\tporcentaje=0.005\n\t\t\tporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\n\t\t\tmonto_mes_actual = base_mes_actual * porcentaje\n\t\telse:\n\t\t\tmonto_mes_actual = 0\n\n\t\tif base_otro_mes >= payslip.smlv/30 * (dias_otro_mes) * 4 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 4))<0.01):\n\t\t\tporcentaje=0.005\n\t\t\tporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\n\t\t\tmonto_otro_mes = base_otro_mes * porcentaje\n\t\telse:\n\t\t\tmonto_otro_mes = 0\n\n\t\tresult = monto_mes_actual + monto_otro_mes"
      },
      {
        "code":"FON_SOL_SUB", "struct_id":"Estructura Base", "sequence": 46 , "appears_on_payslip":"True", "condition_range":"contract.wage", "amount_fix":"0.00", "amount_percentage":"1.0000", "condition_range_min":"0", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"0", "name":"Aporte Fondo de solidaridad-Subsistencia", "category_id":"DED", "quantity":"1.0", "origin_partner":"fp",
        "condition_python":"result = 0\nif payslip.liquidar_por in('nomina','definitiva','vacaciones') and contract.tipo_salario in('tradicional','integral'):\n\ttot_base = payslip.base_fondo_solidaridad_hecho + BAS_FS\n\tfondo_pago = payslip.subsistence_fund_paid\n\tresult = not employee.pensionado and ((BAS_FS >= (payslip.smlv/30 * (payslip.dias_trabajados + payslip.dias_incapacidad_comun + payslip.dias_licencia_mat_pat + payslip.nod_paid_leaves) * 4)) or (abs(BAS_FS - (payslip.smlv/30 * (payslip.dias_trabajados + payslip.dias_incapacidad_comun + payslip.dias_licencia_mat_pat + payslip.nod_paid_leaves) * 4))<0.01) or (tot_base>= payslip.smlv * 4) or fondo_pago!=0)",
        "amount_python_compute":"base_fs_mes = BAS_FS\nporcentaje = 0\nporcentaje_pensionado=0\ndias_liq = 0\nif payslip.liquidar_por in ('vacaciones'):\n\tdias_liq = payslip.dias_vacaciones\nelse:\n\tdias_liq = payslip.dias_trabajados + payslip.dias_incapacidad_comun + payslip.nod_paid_leaves + payslip.dias_licencia_mat_pat\n\nif base_fs_mes >= payslip.smlv/30 * dias_liq * 20 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 20))<0.01):\n\tporcentaje = 0.015\n\tporcentaje_pensionado=0.02\nelif base_fs_mes >= payslip.smlv/30 * dias_liq * 19 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 19))<0.01):\n\tporcentaje = 0.013\n\tporcentaje_pensionado=0.01\nelif base_fs_mes >= payslip.smlv/30 * dias_liq * 18 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 18))<0.01):\n\tporcentaje = 0.011\n\tporcentaje_pensionado=0.01\nelif base_fs_mes >= payslip.smlv/30 * dias_liq * 17 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 17))<0.01):\n\tporcentaje = 0.009\n\tporcentaje_pensionado=0.01\nelif base_fs_mes >= payslip.smlv/30 * dias_liq * 16 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 16))<0.01):\n\tporcentaje = 0.007\n\tporcentaje_pensionado=0.01\nelif base_fs_mes >= payslip.smlv/30 * dias_liq * 4 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 4))<0.01):\n\tporcentaje=0.005\n\nporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\n\ncurrent_payrroll_fund = base_fs_mes * porcentaje\n\nif payslip.liquidar_por in ('nomina','definitiva'):\n\tif payslip.date_to== payslip.last_day_month:\n\t\ttot_base = payslip.base_fondo_solidaridad_hecho + BAS_FS\n\t\tfondo_pago = payslip.subsistence_fund_paid\n\t\tif tot_base >= payslip.smlv * 4 or (abs(tot_base-(payslip.smlv * 4)))<0.01:\n\t\t\tporcentaje = 0\n\t\t\tporcentaje_pensionado = 0\n\t\t\tif tot_base >= payslip.smlv * 20 or (abs(tot_base-(payslip.smlv * 20)))<0.01:\n\t\t\t\tporcentaje = 0.015\n\t\t\t\tporcentaje_pensionado=0.02\n\t\t\telif tot_base >= payslip.smlv * 19 or (abs(tot_base-(payslip.smlv * 19)))<0.01:\n\t\t\t\tporcentaje = 0.013\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif tot_base >= payslip.smlv * 18 or (abs(tot_base-(payslip.smlv * 18)))<0.01:\n\t\t\t\tporcentaje = 0.011\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif tot_base >= payslip.smlv * 17 or (abs(tot_base-(payslip.smlv * 17)))<0.01:\n\t\t\t\tporcentaje = 0.009\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif tot_base >= payslip.smlv * 16 or (abs(tot_base-(payslip.smlv * 16)))<0.01:\n\t\t\t\tporcentaje = 0.007\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif tot_base >= payslip.smlv * 4 or (abs(tot_base-(payslip.smlv * 4)))<0.01:\n\t\t\t\tporcentaje=0.005\n\t\t\tporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\n\t\t\tif tot_base * porcentaje == (fondo_pago + current_payrroll_fund):\n\t\t\t\tresult = current_payrroll_fund\n\t\t\telse:\n\t\t\t\tresult = (tot_base * porcentaje) - fondo_pago\n\t\telse:\n\t\t\tif fondo_pago>0:\n\t\t\t\tresult = -fondo_pago\n\t\t\telse:\n\t\t\t\tresult = 0\n\n\telse:\n\t\tporcentaje = 0\n\t\tif base_fs_mes >= payslip.smlv/30 * dias_liq * 4 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 4))<0.01):\n\t\t\tporcentaje = 0.005\n\t\tresult = base_fs_mes * porcentaje\n\nelif payslip.liquidar_por in ('vacaciones'):\n\tif payslip.date_from.month==payslip.date_to.month:\n\t\tresult = current_payrroll_fund\n\telse:\n\t\tdias_otro_mes = payslip.dias_a_pagar - payslip.days_month_date_from - 1\n\t\tbase_otro_mes = (base_fs_mes/payslip.dias_a_pagar) * dias_otro_mes\n\t\tbase_mes_actual = base_fs_mes - base_otro_mes\n\t\tif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) * 4 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 4))<0.01):\n\t\t\tporcentaje = 0.005\n\t\t\tporcentaje_pensionado = 0\n\t\t\tif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) * 20 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 20))<0.01):\n\t\t\t\tporcentaje = 0.015\n\t\t\t\tporcentaje_pensionado=0.02\n\t\t\telif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) *19 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 19))<0.01):\n\t\t\t\tporcentaje = 0.013\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) * 18 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 18))<0.01):\n\t\t\t\tporcentaje = 0.011\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) * 17 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 17))<0.01):\n\t\t\t\tporcentaje = 0.009\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) * 16 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 16))<0.01):\n\t\t\t\tporcentaje = 0.007\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\tporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\n\t\t\tmonto_mes_actual = base_mes_actual * porcentaje\n\t\telse:\n\t\t\tmonto_mes_actual = 0\n\n\t\tif base_otro_mes >= payslip.smlv/30 * (dias_otro_mes) * 4 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 4))<0.01):\n\t\t\tporcentaje = 0.005\n\t\t\tporcentaje_pensionado = 0\n\t\t\tif base_mes_actual >= payslip.smlv/30 * (dias_otro_mes) * 20 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 20))<0.01):\n\t\t\t\tporcentaje = 0.015\n\t\t\t\tporcentaje_pensionado=0.02\n\t\t\telif base_otro_mes >= payslip.smlv/30 * (dias_otro_mes) *19 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 19))<0.01):\n\t\t\t\tporcentaje = 0.013\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif base_otro_mes >= payslip.smlv/30 * (dias_otro_mes) * 18 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 18))<0.01):\n\t\t\t\tporcentaje = 0.011\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif base_otro_mes >= payslip.smlv/30 * (dias_otro_mes) * 17 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 17))<0.01):\n\t\t\t\tporcentaje = 0.009\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif base_otro_mes >= payslip.smlv/30 * (dias_otro_mes) * 16 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 16))<0.01):\n\t\t\t\tporcentaje = 0.007\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\tporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\n\t\t\tmonto_otro_mes = base_otro_mes * porcentaje\n\t\telse:\n\t\t\tmonto_otro_mes = 0\n\t\tresult = monto_mes_actual + monto_otro_mes"
      },

      {"code":"PRI_SER", "struct_id":"Estructura Base",  "sequence": 61 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"100.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Prima de servicios",   	"condition_python":"result = payslip.liquidar_por in('prima','definitiva') and  contract.tipo_salario=='tradicional'",   "amount_python_compute":"try:\n  auxilio_transporte=AUX_TRA\n  auxilio_transporte=payslip.aux_trans\nexcept :\n  auxilio_transporte=0\nresult = ((payslip.promedio_sal_aux_tras_180)*payslip.dias_prima)/360",   "category_id":"PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"CES", "struct_id":"Estructura Base",  "sequence": 62 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"100.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Cesantías",   				"condition_python":"result = payslip.liquidar_por in('cesantias','definitiva') and contract.tipo_salario=='tradicional'",   "amount_python_compute":"auxilio_transporte = payslip.aux_trans if contract.wage < payslip.smlv * 2 else 0\nif (contract.wage +auxilio_transporte)!=payslip.promedio_sal_aux_tras_90 and payslip.promedio_sal_aux_tras_90 or contract.salario_variable:   \n    result = payslip.promedio_sal_aux_tras_360*payslip.dias_cesantias/360   \nelse:    \n    result = (contract.wage +auxilio_transporte)*payslip.dias_cesantias/360",   "category_id":"PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"INT_CES", "struct_id":"Estructura Base", "sequence": 63 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"100.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Intereses de cesantías",   "condition_python":"result = payslip.liquidar_por in('intereses_cesantias','definitiva') and contract.tipo_salario=='tradicional'",   "amount_python_compute":"auxilio_transporte = payslip.aux_trans if contract.wage < payslip.smlv * 2 else 0\nif (contract.wage +auxilio_transporte)!=payslip.promedio_sal_aux_tras_90 and payslip.promedio_sal_aux_tras_90  or contract.salario_variable:   \n    cesantias = payslip.promedio_sal_aux_tras_360*payslip.dias_cesantias/360\nelse:    \n    cesantias = (contract.wage +auxilio_transporte)*payslip.dias_cesantias/360\nresult = cesantias*0.12*(payslip.dias_intereses_cesantias if payslip.dias_intereses_cesantias else payslip.dias) /360",   "category_id":"PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"BAS_PRE_SOC", "struct_id":"Estructura Base",  "sequence": 64 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Base prestaciones sociales",   		"condition_python":"result = payslip.liquidar_por in('nomina','vacaciones') and contract.tipo_salario in('tradicional','integral')","amount_python_compute":"try:\n  auxilio_transporte=AUX_TRA\n  auxilio_transporte_mes=payslip.aux_trans if contract.wage < payslip.smlv * 2 else 0\nexcept :\n  auxilio_transporte=0\n  auxilio_transporte_mes = 0\n\nif payslip.liquidar_por in('nomina','definitiva') :\n  salario = (categories.ING_SAL-payslip.nod_paid_leaves*contract.wage/30+auxilio_transporte)\n  dias = payslip.dias_trabajados if payslip.dias_trabajados else 0\n  reemplazo_auxilios = (salario/dias if dias else (payslip.valor_dia_reemplazo_hecho if payslip.valor_dia_reemplazo_hecho else (payslip.wage+auxilio_transporte_mes)/30))*(payslip.nod_paid_leaves+payslip.dias_incapacidad_comun)\n  result=salario+reemplazo_auxilios\nelif payslip.liquidar_por in('vacaciones'):\n result =(payslip.valor_dia_reemplazo_hecho if payslip.valor_dia_reemplazo_hecho else (payslip.wage+auxilio_transporte_mes)/30)*payslip.dias",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"PRO_PRI_SER", "struct_id":"Estructura Base", "sequence": 65 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00", "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Provisión prima de servicios",   			"condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') and contract.tipo_salario=='tradicional'",   "amount_python_compute":"try:\n  auxilio_transporte=AUX_TRA\n  auxilio_transporte=payslip.aux_trans if contract.wage < payslip.smlv * 2 else 0\nexcept :\n  auxilio_transporte=0\n\ntry:\n rel_pri_ser = REL_PRI_SER\nexcept:\n rel_pri_ser=0\n\nif payslip.liquidar_por in('nomina','vacaciones'):\n   result = ((BAS_PRE_SOC/(payslip.dias-payslip.nod_unpaid_leaves)) if payslip.dias-payslip.nod_unpaid_leaves else (payslip.wage+auxilio_transporte)/30)*payslip.dias/12\nelif payslip.liquidar_por in('definitiva'):\n   saldo = contract.saldo_prima if contract.fecha_corte and payslip.date_from_prima<contract.fecha_corte else 0\n   provisionado = payslip.sum('PRO_PRI_SER',payslip.date_from_prima,contract.date_end)+saldo-payslip.sum('PRI_SER',payslip.date_from_prima,contract.date_end) - payslip.sum('REL_PRI_SER',payslip.date_from_prima,contract.date_end)\n   result = rel_pri_ser + PRI_SER - provisionado",   "category_id":"PRO_PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"PRO_CES", "struct_id":"Estructura Base","sequence": 66 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Provisión cesantías",   					"condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') and contract.tipo_salario=='tradicional'",   "amount_python_compute":"if payslip.liquidar_por in('nomina','vacaciones'):\n   result = BAS_PRE_SOC/12\nelif payslip.liquidar_por in('definitiva'):\n   saldo = contract.saldo_cesantias if contract.fecha_corte and payslip.date_from_cesantias<contract.fecha_corte else 0\n   provisionado = payslip.sum('PRO_CES',payslip.date_from_cesantias,contract.date_end)+saldo-payslip.sum('CES',payslip.date_from_cesantias,contract.date_end)\n   result = CES-provisionado",   "category_id":"PRO_PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},
      {
        "code":"PRO_INT_CES", "struct_id":"Estructura Base", "sequence": 67, "appears_on_payslip":"", "condition_range":"contract.wage", "amount_fix":"0.00", "amount_percentage":"0.0000", "condition_range_min":"0", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"0", "name":"Provisión intereses de cesantías", "category_id":"PRO_PRE_SOC", "quantity":"1.0", "origin_partner":"employee",
        "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') and contract.tipo_salario=='tradicional'",
        "amount_python_compute":"if payslip.liquidar_por in ('nomina','vacaciones'):\n    date_start_year = payslip.date_from.replace(day=1,month=1)\n    #La fecha inicial es el inicio del año o el inicio del contrato\n    if  date_start_year < contract.date_start:\n        date_start_year = contract.date_start\n        \n    pro_ces_acum = payslip.sum('PRO_CES',date_start_year,payslip.date_to) + PRO_CES\n    if payslip.liquidar_por == 'nomina': \n        days_worked = payslip.env['hr.payslip'].get_days_worked(payslip.employee_id, date_start_year, payslip.date_to) + payslip.dias - payslip.nod_unpaid_leaves - payslip.dias_vacaciones\n    else:\n        days_worked = payslip.env['hr.payslip'].get_days_worked(payslip.employee_id, date_start_year, payslip.date_to) + payslip.dias_vacaciones\n    \n    pro_int_ces_acum = payslip.sum('PRO_INT_CES',date_start_year,payslip.date_to)\n    # El interés acumulado corresponde al 12% de las cesantias por los días trabajados sobre 360  \n    int_acum = (pro_ces_acum * 0.12 * days_worked )/360\n    diff = int_acum - pro_int_ces_acum\n\n    #La diferencia de interés acumulado y la provisión es menor a 0 no se adiciona provisión en la nómina actual\n    if diff <= 0:\n        result = 0\n    else:\n        result = diff \n\nelif payslip.liquidar_por in('definitiva'):\n    saldo = contract.saldo_intereses_cesantias if contract.fecha_corte and payslip.date_from_cesantias<contract.fecha_corte else 0\n    provisionado = payslip.sum('PRO_INT_CES',payslip.date_from_cesantias,contract.date_end)+saldo-payslip.sum('INT_CES',payslip.date_from_cesantias,contract.date_end)\n    result = INT_CES-provisionado"
      },
      {"code":"BAS_VAC", "struct_id":"Estructura Base", "sequence": 68 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Base vacaciones",   					"condition_python":"result = payslip.liquidar_por in('nomina','vacaciones') and contract.tipo_salario in('tradicional','integral')",   "amount_python_compute":"try:\n  auxilio_transporte=AUX_TRA\n  auxilio_transporte=(payslip.aux_trans if contract.wage < payslip.smlv * 2 else 0)*(payslip.dias-payslip.nod_unpaid_leaves)/30 if auxilio_transporte!=0 else 0\nexcept :\n  auxilio_transporte=0\nresult = BAS_PRE_SOC-(categories.HOR_EXT + categories.RECARGO - categories.HRN)-auxilio_transporte",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"PRO_VAC", "struct_id":"Estructura Base", "sequence": 69 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Provisión vacaciones",   					"condition_python":"result = payslip.liquidar_por in('nomina','vacaciones') and contract.tipo_salario in('tradicional','integral')",   "amount_python_compute":"result = BAS_VAC/24",   "category_id":"PRO_PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"SAL_TRA",  "struct_id":"Estructura Base", "sequence": 91 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"1000.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"BAS",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Salario tradicional",   "condition_python":"result = payslip.liquidar_por in('nomina') and contract.tipo_salario in('tradicional')",   "amount_python_compute":"result = SUELDO",   "category_id":"DCONT",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"SAL_INT", "struct_id":"Estructura Base",   "sequence": 92 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Salario integral",   "condition_python":"result = payslip.liquidar_por in('nomina') and contract.tipo_salario=='integral'",   "amount_python_compute":"result = SUELDO",   "category_id":"DCONT",   "quantity":"1.0",   "origin_partner":"employee"},
      {
        "code":"BRU", "struct_id":"Estructura Base", "sequence": 93 , "appears_on_payslip":"True", "condition_range":"contract.wage", "amount_fix":"0.0", "amount_percentage":"0.0", "condition_range_min":"", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"", "name":"Subtotal ingresos", "category_id":"BRU", "quantity":"1.0", "origin_partner":"employee",
        "condition_python":"result = True ",
        "amount_python_compute":"try:\n    bonos_epctv_alimentacion_s = inputs.BONO_EPCTV_ALIMENTACION_S.amount\nexcept:\n    bonos_epctv_alimentacion_s = 0\ntry:\n    bonos_epctv_alimentacion_ns = inputs.BONO_EPCTV_ALIMENTACION_NS.amount\nexcept:\n    bonos_epctv_alimentacion_ns = 0\nresult = categories.ING + categories.PRE_SOC - bonos_epctv_alimentacion_s - bonos_epctv_alimentacion_ns"
      },
      {"code":"AUX_EST",  "struct_id":"Estructura Base", "sequence": 94 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"1000.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"BAS",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Remuneracion estudiante",   "condition_python":"result = payslip.liquidar_por in('nomina','definitiva') and contract.tipo_salario in('pasante','practicante','aprendiz Sena')",   "amount_python_compute":"result = SUELDO",   "category_id":"DCONT",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"BASE_REL_PRI", "struct_id":"Estructura Base",  "sequence": 93 ,   "appears_on_payslip":"True",  "condition_select":"python",  "amount_select":"code",   "active":"True", "name":"Base promedio reliquidación de prima",   "quantity":"1.0",   "origin_partner":"employee",   "condition_python":"result = payslip.liquidar_por == 'nomina' and  contract.tipo_salario=='tradicional' and (contract.salario_variable or payslip.company_id.average_in_fixed_salary) and ((int(payslip.date_to.month)==6 and int(payslip.date_to.day)==30) or (int(payslip.date_to.month)==12 and int(payslip.date_to.day)=='31'))",   "amount_python_compute":"prima = payslip.env['hr.payslip'].search([('liquidar_por','=','prima'),('employee_id', '=', employee.id),('date_to','=',payslip.date_to),('state', '=', 'done')])\nif prima:\n\tif payslip.company_id.vacations_in_average:\n\t\tnominas = payslip.env['hr.payslip'].search([('liquidar_por','in',('nomina','vacaciones')),('employee_id', '=', employee.id),('date_to','<=',payslip.date_to),('date_from','>=',prima.date_from),('state', '=', 'done')])\n\telse:\n\t\tnominas = payslip.env['hr.payslip'].search([('liquidar_por','=','nomina'),('employee_id', '=', employee.id),('date_to','<=',payslip.date_to),('date_from','>=',prima.date_from),('state', '=', 'done')])\n\tval_prom_prima,suspensiones,variable_prima_calc, dias_pagos_prima = nominas.calcular_promedio_variable(contract,prima.date_from_prima,prima.date_to,180)\n\tval_prom_prima = prima.promedio_sal_aux_tras_180\n\t#variable_prima = prima.promedio_sal_aux_tras_180 * dias_pagos_prima/30\n\tnew_val_prom_prima = 0\n\tlicenses_as_suspension = payslip.company_id.licenses_as_suspension\n\tvariable_liquidado = ausencias_nopagas_liquidadas = ausencias_pagas_liquidadas = 0\n\ttry:\n\t\taux_tra = AUX_TRA\n\texcept:\n\t\taux_tra = 0\n\ting_sal = ING_SAL + aux_tra\n\tz = SUELDO*(payslip.nod_paid_leaves)/payslip.dias_a_pagar if payslip.dias_a_pagar else 1\n\tif payslip.dias_incapacidad_comun>0:\n\t\ting_sal += payslip.dias_incapacidad_comun * (payslip.wage/30)\n\tvariable_liquidado += ing_sal\n\tausencias_pagas_liquidadas += payslip.nod_paid_leaves + payslip.dias_incapacidad_comun + (payslip.dias_vacaciones if payslip.liquidar_por != 'vacaciones' else 0)\n\t#si hay ausencias no pagas liquidadas y no se cuenta como suspensión se suma a ausencias pagas liquidadas y por el periodo se suma el valor como si hubiera trabajado\n\tausencias_nopagas_liquidadas += payslip.nod_unpaid_leaves if licenses_as_suspension else 0\n\tausencias_nopagas_liquidada = payslip.nod_unpaid_leaves if not licenses_as_suspension else 0\n\tif ausencias_nopagas_liquidada>0:\n\t\tvariable_liquidado += ausencias_nopagas_liquidada * (payslip.wage/30)\n\tdias_total = payslip.dias_a_pagar + payslip.dias_incapacidad_comun\n\tdias_pagos = dias_total - (ausencias_nopagas_liquidadas)\n\tvariable_liquidado_total = variable_liquidado + variable_prima_calc\n\tnew_val_prom_prima += (variable_liquidado_total) * 30 / (dias_pagos + dias_pagos_prima) if dias_pagos else 0\n\tresult = ((new_val_prom_prima/30) * (dias_pagos + dias_pagos_prima) * 15)/180 - ((val_prom_prima/30)*(prima.dias_prima)*15)/180\n\tresult = new_val_prom_prima\nelse:\n\tprimas = payslip.env['hr.payslip'].search([('liquidar_por','=','prima'),('date_to','=',payslip.date_to),('state', '=', 'done')])\n\tif primas and contract.date_start >= payslip.first_day_month:\n\t\tnew_val_prom_prima = 0\n\t\tlicenses_as_suspension = payslip.company_id.licenses_as_suspension\n\t\tvariable_liquidado = ausencias_nopagas_liquidadas = ausencias_pagas_liquidadas = 0\n\t\ttry:\n\t\t\taux_tra = AUX_TRA\n\t\t\taux_tra = payslip.aux_trans\n\t\texcept:\n\t\t\taux_tra = 0\n\t\ting_sal = ING_SAL + aux_tra\n\t\ting_sal += payslip.dias_vacaciones * (payslip.wage/30)\n\t\tz = SUELDO*(payslip.nod_paid_leaves)/payslip.dias_a_pagar if payslip.dias_a_pagar else 1\n\t\tif payslip.dias_incapacidad_comun>0:\n\t\t\ting_sal += payslip.dias_incapacidad_comun * (payslip.wage/30)\n\t\tvariable_liquidado += ing_sal\n\t\tausencias_pagas_liquidadas += payslip.nod_paid_leaves + payslip.dias_incapacidad_comun + (payslip.dias_vacaciones if payslip.liquidar_por != 'vacaciones' else 0)\n\t\t#si hay ausencias no pagas liquidadas y no se cuenta como suspensión se suma a ausencias pagas liquidadas y por el periodo se suma el valor como si hubiera trabajado\n\t\tausencias_nopagas_liquidadas += payslip.nod_unpaid_leaves if licenses_as_suspension else 0\n\t\tausencias_nopagas_liquidada = payslip.nod_unpaid_leaves if not licenses_as_suspension else 0\n\t\tif ausencias_nopagas_liquidada>0:\n\t\t\tvariable_liquidado += ausencias_nopagas_liquidada * (payslip.wage/30)\n\t\tdias_total = payslip.dias_a_pagar + payslip.dias_incapacidad_comun\n\t\tdias_pagos = dias_total - (ausencias_nopagas_liquidadas)\n\t\tvariable_liquidado_total = variable_liquidado\n\t\tnew_val_prom_prima += variable_liquidado_total\n\t\tresult = ((payslip.wage+aux_tra) * payslip.dias_a_pagar)/360\n\t\tresult = payslip.wage + aux_tra\n\telse:\n\t\tresult=0",   "category_id":"BAS_CAL"},
      {"code":"REL_PRI_SER", "struct_id":"Estructura Base",  "sequence": 94 ,   "appears_on_payslip":"True",  "condition_select":"python",  "amount_select":"code",   "active":"True", "name":"Reliquidación de prima",   "quantity":"1.0",   "origin_partner":"employee",   "condition_python":"result = payslip.liquidar_por == 'nomina' and  contract.tipo_salario=='tradicional' and (contract.salario_variable or payslip.company_id.average_in_fixed_salary) and ((int(payslip.date_to.month)==6 and int(payslip.date_to.day)==30) or (int(payslip.date_to.month)==12 and int(payslip.date_to.day)=='31'))",   "amount_python_compute":"prima = payslip.env['hr.payslip'].search([('liquidar_por','=','prima'),('employee_id', '=', employee.id),('date_to','=',payslip.date_to),('state', '=', 'done')])\nif prima:\n\tif payslip.company_id.vacations_in_average:\n\t\tnominas = payslip.env['hr.payslip'].search([('liquidar_por','in',('nomina','vacaciones')),('employee_id', '=', employee.id),('date_to','<=',payslip.date_to),('date_from','>=',prima.date_from),('state', '=', 'done')])\n\telse:\n\t\tnominas = payslip.env['hr.payslip'].search([('liquidar_por','=','nomina'),('employee_id', '=', employee.id),('date_to','<=',payslip.date_to),('date_from','>=',prima.date_from),('state', '=', 'done')])\n\tval_prom_prima,suspensiones,variable_prima_calc, dias_pagos_prima = nominas.calcular_promedio_variable(contract,prima.date_from_prima,prima.date_to,180)\n\tval_prom_prima = prima.promedio_sal_aux_tras_180\n\t#variable_prima = prima.promedio_sal_aux_tras_180 * dias_pagos_prima/30\n\tnew_val_prom_prima = 0\n\tlicenses_as_suspension = payslip.company_id.licenses_as_suspension\n\tvariable_liquidado = ausencias_nopagas_liquidadas = ausencias_pagas_liquidadas = 0\n\ttry:\n\t\taux_tra = AUX_TRA\n\texcept:\n\t\taux_tra = 0\n\ting_sal = ING_SAL + aux_tra\n\tz = SUELDO*(payslip.nod_paid_leaves)/payslip.dias_a_pagar if payslip.dias_a_pagar else 1\n\tif payslip.dias_incapacidad_comun>0:\n\t\ting_sal += payslip.dias_incapacidad_comun * (payslip.wage/30)\n\tvariable_liquidado += ing_sal\n\tausencias_pagas_liquidadas += payslip.nod_paid_leaves + payslip.dias_incapacidad_comun + (payslip.dias_vacaciones if payslip.liquidar_por != 'vacaciones' else 0)\n\t#si hay ausencias no pagas liquidadas y no se cuenta como suspensión se suma a ausencias pagas liquidadas y por el periodo se suma el valor como si hubiera trabajado\n\tausencias_nopagas_liquidadas += payslip.nod_unpaid_leaves if licenses_as_suspension else 0\n\tausencias_nopagas_liquidada = payslip.nod_unpaid_leaves if not licenses_as_suspension else 0\n\tif ausencias_nopagas_liquidada>0:\n\t\tvariable_liquidado += ausencias_nopagas_liquidada * (payslip.wage/30)\n\tdias_total = payslip.dias_a_pagar + payslip.dias_incapacidad_comun\n\tdias_pagos = dias_total - (ausencias_nopagas_liquidadas)\n\tvariable_liquidado_total = variable_liquidado + variable_prima_calc\n\tnew_val_prom_prima += (variable_liquidado_total) * 30 / (dias_pagos + dias_pagos_prima) if dias_pagos else 0\n\tresult = ((new_val_prom_prima/30) * (dias_pagos + dias_pagos_prima) * 15)/180 - ((val_prom_prima/30)*(prima.dias_prima)*15)/180\n\t#result = new_val_prom_prima\nelse:\n\tprimas = payslip.env['hr.payslip'].search([('liquidar_por','=','prima'),('date_to','=',payslip.date_to),('state', '=', 'done')])\n\tif primas and contract.date_start >= payslip.first_day_month:\n\t\tnew_val_prom_prima = 0\n\t\tlicenses_as_suspension = payslip.company_id.licenses_as_suspension\n\t\tvariable_liquidado = ausencias_nopagas_liquidadas = ausencias_pagas_liquidadas = 0\n\t\ttry:\n\t\t\taux_tra = AUX_TRA\n\t\t\taux_tra = payslip.aux_trans\n\t\texcept:\n\t\t\taux_tra = 0\n\t\ting_sal = ING_SAL + aux_tra\n\t\ting_sal += payslip.dias_vacaciones * (payslip.wage/30)\n\t\tz = SUELDO*(payslip.nod_paid_leaves)/payslip.dias_a_pagar if payslip.dias_a_pagar else 1\n\t\tif payslip.dias_incapacidad_comun>0:\n\t\t\ting_sal += payslip.dias_incapacidad_comun * (payslip.wage/30)\n\t\tvariable_liquidado += ing_sal\n\t\tausencias_pagas_liquidadas += payslip.nod_paid_leaves + payslip.dias_incapacidad_comun + (payslip.dias_vacaciones if payslip.liquidar_por != 'vacaciones' else 0)\n\t\t#si hay ausencias no pagas liquidadas y no se cuenta como suspensión se suma a ausencias pagas liquidadas y por el periodo se suma el valor como si hubiera trabajado\n\t\tausencias_nopagas_liquidadas += payslip.nod_unpaid_leaves if licenses_as_suspension else 0\n\t\tausencias_nopagas_liquidada = payslip.nod_unpaid_leaves if not licenses_as_suspension else 0\n\t\tif ausencias_nopagas_liquidada>0:\n\t\t\tvariable_liquidado += ausencias_nopagas_liquidada * (payslip.wage/30)\n\t\tdias_total = payslip.dias_a_pagar + payslip.dias_incapacidad_comun\n\t\tdias_pagos = dias_total - (ausencias_nopagas_liquidadas)\n\t\tvariable_liquidado_total = variable_liquidado\n\t\tnew_val_prom_prima += variable_liquidado_total\n\t\tresult = ((payslip.wage+aux_tra) * payslip.dias_a_pagar)/360\n\t\t#result = payslip.wage + aux_tra\n\telse:\n\t\tresult=0",   "category_id":"PRE_SOC"},

      {"code":"DEDUCCION_ANTICIPO", "struct_id":"Estructura Base",  "sequence": 94 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Anticipo (Deducción)",   "condition_python":"result= inputs.DEDUCCION_ANTICIPO and inputs.DEDUCCION_ANTICIPO.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.DEDUCCION_ANTICIPO.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},

      {
        "code":"BAS_GRA_RTF", "struct_id":"Estructura Base", "sequence": 95 , "appears_on_payslip":"True", "condition_range":"contract.wage", "amount_fix":"0.00", "amount_percentage":"0.0000", "condition_range_min":"0", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"0", "name":"Base Gravable Retefuente", "category_id":"BAS_CAL", "quantity":"1.0", "origin_partner":"employee",
        "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','prima') and contract.tipo_salario in('tradicional','integral') and (payslip.date_to == payslip.last_day_month)",
        "amount_python_compute":"first_day_month = payslip.first_day_month if payslip.liquidar_por in ('nomina','vacaciones','prima') else payslip.first_day_month_date_to\n# Total pagos laborales en el mes (suma categoria ING-Ingresos de nominas anteriores + la actual )\ntotal_ingresos = 0\nif payslip.liquidar_por != 'prima':\n total_ingresos = payslip.sum_category('ING_SAL', first_day_month, payslip.last_day_month) + payslip.sum_category('ING_NO_SAL',first_day_month, payslip.last_day_month)\n # Si se realiza una deducción de un anticipo pagado anteriormente se resta, para que no sume a la base\n try:\n  total_ingresos -= DEDUCCION_ANTICIPO\n except :\n  total_ingresos -= 0\n total_ingresos -= payslip.sum('DEDUCCION_ANTICIPO',first_day_month, payslip.last_day_month)\ntotal_ingresos += categories.ING\n\n# Bonos de alimentación no se tiene en cuenta siempre y cuando el bono no supere 41 UVT y el sueldo del empleado no supere 310 UVT\nbono_alimentacion = 0\nbono_alimentacion += payslip.sum('BONO_EPCTV_ALIMENTACION_S',first_day_month, payslip.last_day_month)\nbono_alimentacion += payslip.sum('BONO_EPCTV_ALIMENTACION_NS',first_day_month, payslip.last_day_month)\ntry:\n bono_alimentacion += BONO_EPCTV_ALIMENTACION_S\nexcept :\n bono_alimentacion += 0\ntry:\n bono_alimentacion += BONO_EPCTV_ALIMENTACION_NS\nexcept :\n bono_alimentacion += 0\nif total_ingresos <= payslip.valor_uvt * 310:\n if bono_alimentacion <= payslip.valor_uvt * 41:\n  total_ingresos -= bono_alimentacion\n else: # Si bono es mayor a 41 UVT se tiene en cuenta el excedente\n  total_ingresos -= payslip.valor_uvt * 41\n\n# Ingresos no constitutivos de renta ni ganancia ocasional\ntotal_ingresos_nconst = 0\n# Para nominas anteriores (No aplica para la prima)\nif payslip.liquidar_por != 'prima':\n total_ingresos_nconst += payslip.sum('AFP_TRA',first_day_month, payslip.last_day_month)\n total_ingresos_nconst += payslip.sum('FON_SOL_SOL' ,first_day_month, payslip.last_day_month)\n total_ingresos_nconst += payslip.sum('FON_SOL_SUB' ,first_day_month, payslip.last_day_month)\n total_ingresos_nconst += payslip.sum('EPS_TRA', first_day_month, payslip.last_day_month)\n# Para nomina actual\ntry:\n total_ingresos_nconst += AFP_TRA\nexcept :\n total_ingresos_nconst += 0\ntry:\n total_ingresos_nconst += FON_SOL_SOL\nexcept :\n total_ingresos_nconst += 0\ntry:\n total_ingresos_nconst += FON_SOL_SUB\nexcept :\n total_ingresos_nconst += 0\ntry:\n total_ingresos_nconst += EPS_TRA\nexcept :\n total_ingresos_nconst += 0\n\n\nsubtotal_A = total_ingresos -  total_ingresos_nconst\n\n\n# Total Deducciones\ntotal_deducciones = 0\nif payslip.liquidar_por != 'prima':\n\n if employee.int_vivienda:\n  if employee.int_vivienda < 100*payslip.valor_uvt:\n   total_deducciones += employee.int_vivienda\n  else:\n   total_deducciones += 100*payslip.valor_uvt\n\n if employee.med_prep:\n  if employee.med_prep < 16*payslip.valor_uvt:\n   total_deducciones += employee.med_prep\n  else:\n   total_deducciones += 16*payslip.valor_uvt\n\n if employee.dependientes:\n  if employee.dependientes < min(total_ingresos*0.1, 32*payslip.valor_uvt):\n   total_deducciones += employee.dependientes\n  else:\n   total_deducciones += min(total_ingresos*0.1, 32*payslip.valor_uvt)\n\n\n# Rentas Excentas\ntotal_rentas_exentas = 0\nif payslip.liquidar_por != 'prima':\n try:\n  total_rentas_exentas += FPV\n except :\n  total_rentas_exentas += 0\n try:\n  total_rentas_exentas += AFC\n except :\n  total_rentas_exentas += 0\n try:\n  total_rentas_exentas += AVC\n except :\n  total_rentas_exentas += 0\n     # Limite que aplica a las rentas exentas sumadas hata aqui\n if total_rentas_exentas > min(payslip.valor_uvt*(3800/12), total_ingresos*0.3):\n  total_rentas_exentas = min(payslip.valor_uvt*(3800/12), total_ingresos*0.3)\n\n      # Rentas exentas que ingresan por Otras entradas (nominas anteriores, no aplica prima)\n total_rentas_exentas  += payslip.sum('IND_ACC_ENF', first_day_month, payslip.last_day_month)\n total_rentas_exentas  += payslip.sum('IND_PRO_MAT', first_day_month, payslip.last_day_month)\n total_rentas_exentas  += payslip.sum('GAS_ENT', first_day_month, payslip.last_day_month)\n\n     # Rentas exentas que ingresan por Otras entradas (nomina actual)\nif inputs.IND_ACC_ENF and inputs.IND_ACC_ENF.amount:\n total_rentas_exentas += IND_ACC_ENF.amount\nif inputs.IND_PRO_MAT and inputs.IND_PRO_MAT.amount:\n total_rentas_exentas += IND_PRO_MAT\nif inputs.GAS_ENT and inputs.GAS_ENT.amount:\n total_rentas_exentas += GAS_ENT\n\n\nsubtotal_B = subtotal_A - total_deducciones - total_rentas_exentas\n\n\n# El veinticinco por ciento (25%) del valor total de los pagos laborales, limitada mensualmente a doscientas cuarenta (240) UVT. (Numeral 10 art. 206 ET)\nporcentaje_exento = subtotal_B*0.25\nif porcentaje_exento > 240*payslip.valor_uvt:\n porcentaje_exento = 240*payslip.valor_uvt\n\n\n# Limite general de rectas excentas y deducciones,  40% del ingreso neto y hasta 5040 UVT /12 (año)\nexentas_descuentos = porcentaje_exento + total_rentas_exentas + total_deducciones\nexentas_descuentos = min(exentas_descuentos, payslip.valor_uvt*(5040/12), subtotal_A*0.4)\n\n\n#Reliquidación de prima de servicios\nbase_retencion_prima_pagada = base_retencion_prima = 0\nif payslip.liquidar_por != 'prima':\n reliquidacion_prima = payslip.sum_category('REL_PRI_SER', payslip.first_day_month, payslip.last_day_month)\n try:\n  reliquidacion_prima += REL_PRI_SER\n except:\n  reliquidacion_prima += 0\n if reliquidacion_prima>0:\n #valores prima\n  prima = payslip.env['hr.payslip'].search([('liquidar_por','=','prima'),('employee_id', '=', employee.id),('date_to','=',payslip.date_to),('state', '=', 'done')])\n  try:\n   total_prima = payslip.env['hr.payslip.line'].search([('slip_id','=',prima.id),('code', '=', 'PRI_SER')]).total\n  except :\n   total_prima = 0\n  limite_uvt = payslip.valor_uvt*240\n  exento_prima = porcentaje_exento + total_prima*0.25\n  if exento_prima > limite_uvt:\n   total_renta_exenta_prima = limite_uvt - porcentaje_exento\n  else:\n   total_renta_exenta_prima = total_prima*0.25\n  base_retencion_prima_pagada += total_prima -  total_renta_exenta_prima\n\n  #valores prima con reliquidación\n  total_prima += reliquidacion_prima\n  limite_uvt = payslip.valor_uvt*240\n  exento_prima = porcentaje_exento + total_prima*0.25\n  if exento_prima > limite_uvt:\n   total_renta_exenta_prima = limite_uvt - porcentaje_exento\n  else:\n   total_renta_exenta_prima = total_prima*0.25\n  base_retencion_prima += (total_prima -  total_renta_exenta_prima) - base_retencion_prima_pagada\n\n\n# Prima de servicios \nbase_retencion_prima = 0\nif payslip.liquidar_por in ('prima','definitiva') and  contract.tipo_salario=='tradicional':\n try:\n  total_prima = PRI_SER\n except :\n  total_prima = 0\n limite_uvt = payslip.valor_uvt*240\n exento_prima = porcentaje_exento + total_prima*0.25\n if exento_prima > limite_uvt:\n  total_renta_exenta_prima = limite_uvt - porcentaje_exento\n else:\n  total_renta_exenta_prima = total_prima*0.25\n base_retencion_prima += total_prima - total_renta_exenta_prima\n\nresult = subtotal_A - exentas_descuentos + base_retencion_prima"
      },
      {
        "code":"RET_FUE", "struct_id":"Estructura Base", "sequence": 96 , "appears_on_payslip":"True", "condition_range":"contract.wage", "amount_fix":"0.0", "amount_percentage":"0.0", "condition_range_min":"0", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"", "name":"Retención en la fuente", "category_id":"DED", "quantity":"1.0", "origin_partner":"dian",
        "condition_python":"result = payslip.liquidar_por in ('nomina','vacaciones','prima') and contract.tipo_salario in('tradicional','integral') and (payslip.date_to == payslip.last_day_month)",
        "amount_python_compute":"result = 0\n\n# Si es el procedimiento 1 o si es procedimiento 2 pero aun no tiene porcentaje fijo  calculado (Se cambio al proc. 2 pero no ha llegado la fecha del calculo del porcentaje) \nif contract.retencion_fuente == 'procedimiento1' or (contract.retencion_fuente == 'procedimiento2' and not contract.withholding_percentage_id):\n # conversión base gravable a UVT\n base_gravable_uvt = round(BAS_GRA_RTF/payslip.valor_uvt, 1)\n # Calculo del valor de la retención en base a la tabla de retención\n valor_retencion = 0\n for record in contract.retefuente_table_value_ids:\n  if base_gravable_uvt >= record.range_from and base_gravable_uvt < record.range_to:\n   valor_retencion = ((base_gravable_uvt - record.range_from)*(record.marginal_rate/100)+record.uvt_added)*payslip.valor_uvt\n\n result = round(valor_retencion,-3)\n\n# procedimiento 2 y valor de porcentaje en el contrato\nif contract.retencion_fuente == 'procedimiento2' and contract.withholding_percentage_id:\n result = BAS_GRA_RTF * (contract.withholding_percentage_id.percentage_value/100)\n\n# Validar si se pago una retencion previamente en el mes y restar a la retencion actual\nif payslip.liquidar_por != 'prima':\n retencion_paga = payslip.sum('RET_FUE', payslip.first_day_month, payslip.last_day_month)\n result -= retencion_paga"
      },
      {
        "code":"RET_FUE_MAN", "struct_id":"Estructura Base", "sequence": 96 , "appears_on_payslip":"True", "condition_range":"contract.wage", "amount_fix":"0.00", "amount_percentage":"0.0000", "condition_range_min":"0", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"0", "name":"Retención en la fuente manual", "category_id":"DED",   "quantity":"1.0",   "origin_partner":"dian", 
        "condition_python":"result = payslip.liquidar_por in('nomina','definitiva','vacaciones','prima') and (inputs.RFMAN and inputs.RFMAN.amount>0)",
        "amount_python_compute":"if (inputs.RFMAN and inputs.RFMAN.amount>0):\n  result = inputs.RFMAN.amount\nelse:\n  result=0"
      },

      {"code":"SANCION_PUBLIC", "struct_id":"Estructura Base",  "sequence": 102 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Sanción Publica",   "condition_python":"result= inputs.SANCION_PUBLIC and inputs.SANCION_PUBLIC.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.SANCION_PUBLIC.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"SANCION_PRIV", "struct_id":"Estructura Base",  "sequence": 103 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Sanción Privada",   "condition_python":"result= inputs.SANCION_PRIV and inputs.SANCION_PRIV.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.SANCION_PRIV.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"SINDICATOS", "struct_id":"Estructura Base",  "sequence": 104 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Sindicato",   "condition_python":"result= inputs.SINDICATOS and inputs.SINDICATOS.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.SINDICATOS.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"LIBRANZAS", "struct_id":"Estructura Base",  "sequence": 105 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Libranza",   "condition_python":"result= inputs.LIBRANZAS and inputs.LIBRANZAS.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result =inputs.LIBRANZAS.amount ",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"PAGOS_TERCEROS", "struct_id":"Estructura Base",  "sequence": 106 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Pagos Terceros (Deducción)",   "condition_python":"result= inputs.PAGOS_TERCEROS and inputs.PAGOS_TERCEROS.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.PAGOS_TERCEROS.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"EMBARGO_FISCAL", "struct_id":"Estructura Base",  "sequence": 107 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Embargo Fiscal",   "condition_python":"result= inputs.EMBARGO_FISCAL and inputs.EMBARGO_FISCAL.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.EMBARGO_FISCAL.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"EDUCACION", "struct_id":"Estructura Base",  "sequence": 108 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Educación (Deducción)",   "condition_python":"result= inputs.EDUCACION and inputs.EDUCACION.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.EDUCACION.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"DEDUCCION_REINTEGRO", "struct_id":"Estructura Base",  "sequence": 109 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Reintegro (Deducción)",   "condition_python":"result= inputs.DEDUCCION_REINTEGRO and inputs.DEDUCCION_REINTEGRO.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.DEDUCCION_REINTEGRO.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"DEUDA", "struct_id":"Estructura Base",  "sequence": 110 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Deuda ",   "condition_python":"result= inputs.DEUDA and inputs.DEUDA.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result =inputs.DEUDA.amount ",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"DEDUCCION_COOPERATIVA", "struct_id":"Estructura Base",  "sequence": 111 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Cooperativa (Deducción)",   "condition_python":"result= inputs.DEDUCCION_COOPERATIVA and inputs.DEDUCCION_COOPERATIVA.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result =inputs.DEDUCCION_COOPERATIVA.amount ",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"VACACIONES_ANTICIPADAS", "struct_id":"Estructura Base",  "sequence": 112 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Vacaciones Anticipadas",   "condition_python":"result= inputs.VACACIONES_ANTICIPADAS and inputs.VACACIONES_ANTICIPADAS.amount and payslip.liquidar_por in('vacaciones','definitiva')",   "amount_python_compute":"result =inputs.VACACIONES_ANTICIPADAS.amount ",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"OTRA_DEDUCCION", "struct_id":"Estructura Base",  "sequence": 112 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Otra Deducción",   "condition_python":"result= inputs.OTRA_DEDUCCION and inputs.OTRA_DEDUCCION.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result =inputs.OTRA_DEDUCCION.amount ",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"TOTAL_DEDUCCION", "struct_id":"Estructura Base",  "sequence": 113 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Total deducciones",   "condition_python":"result= categories.DED",   "amount_python_compute":"result = categories.DED",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {
        "code":"NET", "struct_id":"Estructura Base", "sequence": 121 , "appears_on_payslip":"True", "condition_range":"contract.wage", "amount_fix":"0.0", "amount_percentage":"0.0", "condition_range_min":"", "condition_select":"python", "amount_percentage_base":"", "amount_select":"code", "active":"True", "condition_range_max":"", "name":"Total a pagar", "category_id":"NET",   "quantity":"1.0",   "origin_partner":"employee",
        "condition_python":"result = True ",
        "amount_python_compute":"try:\n    bonos_epctv_alimentacion_s = inputs.BONO_EPCTV_ALIMENTACION_S.amount\nexcept:\n    bonos_epctv_alimentacion_s = 0\ntry:\n    bonos_epctv_alimentacion_ns = inputs.BONO_EPCTV_ALIMENTACION_NS.amount\nexcept:\n    bonos_epctv_alimentacion_ns = 0\nresult = categories.ING +categories.PRE_SOC - categories.DED - bonos_epctv_alimentacion_s - bonos_epctv_alimentacion_ns"
      }
  ]
}
